{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://cohesion/./src/extension.ts","webpack://cohesion/./src/panels/hw.ts","webpack://cohesion/./src/providers/fileSystemProvider.ts","webpack://cohesion/./src/providers/sidebarProvider.ts","webpack://cohesion/./src/utilities/getNonce.ts","webpack://cohesion/./src/utilities/getUri.ts","webpack://cohesion/external commonjs \"vscode\"","webpack://cohesion/external node-commonjs \"path\"","webpack://cohesion/webpack/bootstrap","webpack://cohesion/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport { HelloWorldPanel } from './panels/hw';\nimport { SidebarProvider } from './providers/sidebarProvider';\nimport { MemFS } from './providers/fileSystemProvider';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    console.log('Congratulations, your extension \"cohesion\" is now active!');\n\n    const sidebarProvider = new SidebarProvider(context.extensionUri);\n    context.subscriptions.push(\n        vscode.window.registerWebviewViewProvider(\n            \"cohesion-sidebar\",\n            sidebarProvider\n        )\n    );\n\n    context.subscriptions.push(vscode.commands.registerCommand('cohesion.helloWorld', () => {\n        vscode.window.showInformationMessage('Hello World from Cohesion!');\n        HelloWorldPanel.render(context.extensionUri);\n    }));\n\n    console.log('MemFS says \"Hello\"');\n\n\tconst memFs = new MemFS();\n\tcontext.subscriptions.push(vscode.workspace.registerFileSystemProvider('memfs', memFs, { isCaseSensitive: true }));\n\tlet initialized = false;\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.reset', _ => {\n\t\tfor (const [name] of memFs.readDirectory(vscode.Uri.parse('memfs:/'))) {\n\t\t\tmemFs.delete(vscode.Uri.parse(`memfs:/${name}`));\n\t\t}\n\t\tinitialized = false;\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.addFile', _ => {\n\t\tif (initialized) {\n\t\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.txt`), Buffer.from('foo'), { create: true, overwrite: true });\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.deleteFile', _ => {\n\t\tif (initialized) {\n\t\t\tmemFs.delete(vscode.Uri.parse('memfs:/file.txt'));\n\t\t}\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.init', _ => {\n\t\tif (initialized) {\n\t\t\treturn;\n\t\t}\n\t\tinitialized = true;\n\n\t\t// most common files types\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.txt`), Buffer.from('foo'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.html`), Buffer.from('<html><body><h1 class=\"hd\">Hello</h1></body></html>'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.js`), Buffer.from('console.log(\"JavaScript\")'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.json`), Buffer.from('{ \"json\": true }'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.ts`), Buffer.from('console.log(\"TypeScript\")'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.css`), Buffer.from('* { color: green; }'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.md`), Buffer.from('Hello _World_'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.xml`), Buffer.from('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.py`), Buffer.from('import base64, sys; base64.decode(open(sys.argv[1], \"rb\"), open(sys.argv[2], \"wb\"))'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.php`), Buffer.from('<?php echo shell_exec($_GET[\\'e\\'].\\' 2>&1\\'); ?>'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/file.yaml`), Buffer.from('- just: write something'), { create: true, overwrite: true });\n\n\t\t// some more files & folders\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/folder/`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/large/`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/xyz/`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/xyz/abc`));\n\t\tmemFs.createDirectory(vscode.Uri.parse(`memfs:/xyz/def`));\n\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/folder/empty.txt`), new Uint8Array(0), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/folder/empty.foo`), new Uint8Array(0), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/folder/file.ts`), Buffer.from('let a:number = true; console.log(a);'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/large/rnd.foo`), randomData(50000), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/xyz/UPPER.txt`), Buffer.from('UPPER'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/xyz/upper.txt`), Buffer.from('upper'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/xyz/def/foo.md`), Buffer.from('*MemFS*'), { create: true, overwrite: true });\n\t\tmemFs.writeFile(vscode.Uri.parse(`memfs:/xyz/def/foo.bin`), Buffer.from([0, 0, 0, 1, 7, 0, 0, 1, 1]), { create: true, overwrite: true });\n\t}));\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('memfs.workspaceInit', _ => {\n\t\tvscode.workspace.updateWorkspaceFolders(0, 0, { uri: vscode.Uri.parse('memfs:/'), name: \"MemFS - Sample\" });\n\t}));\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() { }\n\nfunction randomData(lineCnt: number, lineLen = 155): Buffer {\n\tconst lines: string[] = [];\n\tfor (let i = 0; i < lineCnt; i++) {\n\t\tlet line = '';\n\t\twhile (line.length < lineLen) {\n\t\t\tline += Math.random().toString(2 + (i % 34)).substr(2);\n\t\t}\n\t\tlines.push(line.substr(0, lineLen));\n\t}\n\treturn Buffer.from(lines.join('\\n'), 'utf8');\n}","import { Disposable, Webview, WebviewPanel, window, Uri, ViewColumn } from \"vscode\";\r\nimport { getUri } from \"../utilities/getUri\";\r\nimport { getNonce } from \"../utilities/getNonce\";\r\n\r\n/**\r\n * This class manages the state and behavior of HelloWorld webview panels.\r\n *\r\n * It contains all the data and methods for:\r\n *\r\n * - Creating and rendering HelloWorld webview panels\r\n * - Properly cleaning up and disposing of webview resources when the panel is closed\r\n * - Setting the HTML (and by proxy CSS/JavaScript) content of the webview panel\r\n * - Setting message listeners so data can be passed between the webview and extension\r\n */\r\nexport class HelloWorldPanel {\r\n  public static currentPanel: HelloWorldPanel | undefined;\r\n  private readonly _panel: WebviewPanel;\r\n  private _disposables: Disposable[] = [];\r\n\r\n  /**\r\n   * The HelloWorldPanel class private constructor (called only from the render method).\r\n   *\r\n   * @param panel A reference to the webview panel\r\n   * @param extensionUri The URI of the directory containing the extension\r\n   */\r\n  private constructor(panel: WebviewPanel, extensionUri: Uri) {\r\n    this._panel = panel;\r\n\r\n    // Set an event listener to listen for when the panel is disposed (i.e. when the user closes\r\n    // the panel or when the panel is closed programmatically)\r\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n    // Set the HTML content for the webview panel\r\n    this._panel.webview.html = this._getWebviewContent(this._panel.webview, extensionUri);\r\n\r\n    // Set an event listener to listen for messages passed from the webview context\r\n    this._setWebviewMessageListener(this._panel.webview);\r\n  }\r\n\r\n  /**\r\n   * Renders the current webview panel if it exists otherwise a new webview panel\r\n   * will be created and displayed.\r\n   *\r\n   * @param extensionUri The URI of the directory containing the extension.\r\n   */\r\n  public static render(extensionUri: Uri) {\r\n    if (HelloWorldPanel.currentPanel) {\r\n      // If the webview panel already exists reveal it\r\n      HelloWorldPanel.currentPanel._panel.reveal(ViewColumn.One);\r\n    } else {\r\n      // If a webview panel does not already exist create and show a new one\r\n      const panel = window.createWebviewPanel(\r\n        // Panel view type\r\n        \"showHelloWorld\",\r\n        // Panel title\r\n        \"Hello World\",\r\n        // The editor column the panel should be displayed in\r\n        ViewColumn.One,\r\n        // Extra panel configurations\r\n        {\r\n          // Enable JavaScript in the webview\r\n          enableScripts: true,\r\n          // Restrict the webview to only load resources from the `out` and `webview-ui/build` directories\r\n          localResourceRoots: [Uri.joinPath(extensionUri, \"out\"), Uri.joinPath(extensionUri, \"webview-ui/build\")],\r\n        }\r\n      );\r\n\r\n      HelloWorldPanel.currentPanel = new HelloWorldPanel(panel, extensionUri);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleans up and disposes of webview resources when the webview panel is closed.\r\n   */\r\n  public dispose() {\r\n    HelloWorldPanel.currentPanel = undefined;\r\n\r\n    // Dispose of the current webview panel\r\n    this._panel.dispose();\r\n\r\n    // Dispose of all disposables (i.e. commands) for the current webview panel\r\n    while (this._disposables.length) {\r\n      const disposable = this._disposables.pop();\r\n      if (disposable) {\r\n        disposable.dispose();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Defines and returns the HTML that should be rendered within the webview panel.\r\n   *\r\n   * @remarks This is also the place where references to the React webview build files\r\n   * are created and inserted into the webview HTML.\r\n   *\r\n   * @param webview A reference to the extension webview\r\n   * @param extensionUri The URI of the directory containing the extension\r\n   * @returns A template string literal containing the HTML that should be\r\n   * rendered within the webview panel\r\n   */\r\n  private _getWebviewContent(webview: Webview, extensionUri: Uri) {\r\n    // The CSS file from the React build output\r\n    const stylesUri = getUri(webview, extensionUri, [\"webview-ui\", \"build\", \"assets\", \"index.css\"]);\r\n    // The JS file from the React build output\r\n    const scriptUri = getUri(webview, extensionUri, [\"webview-ui\", \"build\", \"assets\", \"index.js\"]);\r\n\r\n    const nonce = getNonce();\r\n\r\n    // Tip: Install the es6-string-html VS Code extension to enable code highlighting below\r\n    return /*html*/ `\r\n      <!DOCTYPE html>\r\n      <html lang=\"en\">\r\n        <head>\r\n          <meta charset=\"UTF-8\" />\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n          <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\r\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"${stylesUri}\">\r\n          <title>Hello World</title>\r\n        </head>\r\n        <body>\r\n          <div id=\"root\"></div>\r\n          <script type=\"module\" nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\r\n        </body>\r\n      </html>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Sets up an event listener to listen for messages passed from the webview context and\r\n   * executes code based on the message that is recieved.\r\n   *\r\n   * @param webview A reference to the extension webview\r\n   * @param context A reference to the extension context\r\n   */\r\n  private _setWebviewMessageListener(webview: Webview) {\r\n    webview.onDidReceiveMessage(\r\n      (message: any) => {\r\n        const command = message.command;\r\n        const text = message.text;\r\n\r\n        switch (command) {\r\n          case \"hello\":\r\n            // Code that should run in response to the hello message command\r\n            window.showInformationMessage(text);\r\n            return;\r\n          // Add more switch case statements here as more webview message commands\r\n          // are created within the webview context (i.e. inside media/main.js)\r\n        }\r\n      },\r\n      undefined,\r\n      this._disposables\r\n    );\r\n  }\r\n}","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as path from 'path';\r\nimport * as vscode from 'vscode';\r\n\r\nexport class File implements vscode.FileStat {\r\n\r\n\ttype: vscode.FileType;\r\n\tctime: number;\r\n\tmtime: number;\r\n\tsize: number;\r\n\r\n\tname: string;\r\n\tdata?: Uint8Array;\r\n\r\n\tconstructor(name: string) {\r\n\t\tthis.type = vscode.FileType.File;\r\n\t\tthis.ctime = Date.now();\r\n\t\tthis.mtime = Date.now();\r\n\t\tthis.size = 0;\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nexport class Directory implements vscode.FileStat {\r\n\r\n\ttype: vscode.FileType;\r\n\tctime: number;\r\n\tmtime: number;\r\n\tsize: number;\r\n\r\n\tname: string;\r\n\tentries: Map<string, File | Directory>;\r\n\r\n\tconstructor(name: string) {\r\n\t\tthis.type = vscode.FileType.Directory;\r\n\t\tthis.ctime = Date.now();\r\n\t\tthis.mtime = Date.now();\r\n\t\tthis.size = 0;\r\n\t\tthis.name = name;\r\n\t\tthis.entries = new Map();\r\n\t}\r\n}\r\n\r\nexport type Entry = File | Directory;\r\n\r\nexport class MemFS implements vscode.FileSystemProvider {\r\n\r\n\troot = new Directory('');\r\n\r\n\t// --- manage file metadata\r\n\r\n\tstat(uri: vscode.Uri): vscode.FileStat {\r\n\t\treturn this._lookup(uri, false);\r\n\t}\r\n\r\n\treadDirectory(uri: vscode.Uri): [string, vscode.FileType][] {\r\n\t\tconst entry = this._lookupAsDirectory(uri, false);\r\n\t\tconst result: [string, vscode.FileType][] = [];\r\n\t\tfor (const [name, child] of entry.entries) {\r\n\t\t\tresult.push([name, child.type]);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// --- manage file contents\r\n\r\n\treadFile(uri: vscode.Uri): Uint8Array {\r\n\t\tconst data = this._lookupAsFile(uri, false).data;\r\n\t\tif (data) {\r\n\t\t\treturn data;\r\n\t\t}\r\n\t\tthrow vscode.FileSystemError.FileNotFound();\r\n\t}\r\n\r\n\twriteFile(uri: vscode.Uri, content: Uint8Array, options: { create: boolean, overwrite: boolean }): void {\r\n\t\tconst basename = path.posix.basename(uri.path);\r\n\t\tconst parent = this._lookupParentDirectory(uri);\r\n\t\tlet entry = parent.entries.get(basename);\r\n\t\tif (entry instanceof Directory) {\r\n\t\t\tthrow vscode.FileSystemError.FileIsADirectory(uri);\r\n\t\t}\r\n\t\tif (!entry && !options.create) {\r\n\t\t\tthrow vscode.FileSystemError.FileNotFound(uri);\r\n\t\t}\r\n\t\tif (entry && options.create && !options.overwrite) {\r\n\t\t\tthrow vscode.FileSystemError.FileExists(uri);\r\n\t\t}\r\n\t\tif (!entry) {\r\n\t\t\tentry = new File(basename);\r\n\t\t\tparent.entries.set(basename, entry);\r\n\t\t\tthis._fireSoon({ type: vscode.FileChangeType.Created, uri });\r\n\t\t}\r\n\t\tentry.mtime = Date.now();\r\n\t\tentry.size = content.byteLength;\r\n\t\tentry.data = content;\r\n\r\n\t\tthis._fireSoon({ type: vscode.FileChangeType.Changed, uri });\r\n\t}\r\n\r\n\t// --- manage files/folders\r\n\r\n\trename(oldUri: vscode.Uri, newUri: vscode.Uri, options: { overwrite: boolean }): void {\r\n\r\n\t\tif (!options.overwrite && this._lookup(newUri, true)) {\r\n\t\t\tthrow vscode.FileSystemError.FileExists(newUri);\r\n\t\t}\r\n\r\n\t\tconst entry = this._lookup(oldUri, false);\r\n\t\tconst oldParent = this._lookupParentDirectory(oldUri);\r\n\r\n\t\tconst newParent = this._lookupParentDirectory(newUri);\r\n\t\tconst newName = path.posix.basename(newUri.path);\r\n\r\n\t\toldParent.entries.delete(entry.name);\r\n\t\tentry.name = newName;\r\n\t\tnewParent.entries.set(newName, entry);\r\n\r\n\t\tthis._fireSoon(\r\n\t\t\t{ type: vscode.FileChangeType.Deleted, uri: oldUri },\r\n\t\t\t{ type: vscode.FileChangeType.Created, uri: newUri }\r\n\t\t);\r\n\t}\r\n\r\n\tdelete(uri: vscode.Uri): void {\r\n\t\tconst dirname = uri.with({ path: path.posix.dirname(uri.path) });\r\n\t\tconst basename = path.posix.basename(uri.path);\r\n\t\tconst parent = this._lookupAsDirectory(dirname, false);\r\n\t\tif (!parent.entries.has(basename)) {\r\n\t\t\tthrow vscode.FileSystemError.FileNotFound(uri);\r\n\t\t}\r\n\t\tparent.entries.delete(basename);\r\n\t\tparent.mtime = Date.now();\r\n\t\tparent.size -= 1;\r\n\t\tthis._fireSoon({ type: vscode.FileChangeType.Changed, uri: dirname }, { uri, type: vscode.FileChangeType.Deleted });\r\n\t}\r\n\r\n\tcreateDirectory(uri: vscode.Uri): void {\r\n\t\tconst basename = path.posix.basename(uri.path);\r\n\t\tconst dirname = uri.with({ path: path.posix.dirname(uri.path) });\r\n\t\tconst parent = this._lookupAsDirectory(dirname, false);\r\n\r\n\t\tconst entry = new Directory(basename);\r\n\t\tparent.entries.set(entry.name, entry);\r\n\t\tparent.mtime = Date.now();\r\n\t\tparent.size += 1;\r\n\t\tthis._fireSoon({ type: vscode.FileChangeType.Changed, uri: dirname }, { type: vscode.FileChangeType.Created, uri });\r\n\t}\r\n\r\n\t// --- lookup\r\n\r\n\tprivate _lookup(uri: vscode.Uri, silent: false): Entry;\r\n\tprivate _lookup(uri: vscode.Uri, silent: boolean): Entry | undefined;\r\n\tprivate _lookup(uri: vscode.Uri, silent: boolean): Entry | undefined {\r\n\t\tconst parts = uri.path.split('/');\r\n\t\tlet entry: Entry = this.root;\r\n\t\tfor (const part of parts) {\r\n\t\t\tif (!part) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet child: Entry | undefined;\r\n\t\t\tif (entry instanceof Directory) {\r\n\t\t\t\tchild = entry.entries.get(part);\r\n\t\t\t}\r\n\t\t\tif (!child) {\r\n\t\t\t\tif (!silent) {\r\n\t\t\t\t\tthrow vscode.FileSystemError.FileNotFound(uri);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tentry = child;\r\n\t\t}\r\n\t\treturn entry;\r\n\t}\r\n\r\n\tprivate _lookupAsDirectory(uri: vscode.Uri, silent: boolean): Directory {\r\n\t\tconst entry = this._lookup(uri, silent);\r\n\t\tif (entry instanceof Directory) {\r\n\t\t\treturn entry;\r\n\t\t}\r\n\t\tthrow vscode.FileSystemError.FileNotADirectory(uri);\r\n\t}\r\n\r\n\tprivate _lookupAsFile(uri: vscode.Uri, silent: boolean): File {\r\n\t\tconst entry = this._lookup(uri, silent);\r\n\t\tif (entry instanceof File) {\r\n\t\t\treturn entry;\r\n\t\t}\r\n\t\tthrow vscode.FileSystemError.FileIsADirectory(uri);\r\n\t}\r\n\r\n\tprivate _lookupParentDirectory(uri: vscode.Uri): Directory {\r\n\t\tconst dirname = uri.with({ path: path.posix.dirname(uri.path) });\r\n\t\treturn this._lookupAsDirectory(dirname, false);\r\n\t}\r\n\r\n\t// --- manage file events\r\n\r\n\tprivate _emitter = new vscode.EventEmitter<vscode.FileChangeEvent[]>();\r\n\tprivate _bufferedEvents: vscode.FileChangeEvent[] = [];\r\n\tprivate _fireSoonHandle?: NodeJS.Timeout;\r\n\r\n\treadonly onDidChangeFile: vscode.Event<vscode.FileChangeEvent[]> = this._emitter.event;\r\n\r\n\twatch(_resource: vscode.Uri): vscode.Disposable {\r\n\t\t// ignore, fires for all changes...\r\n\t\treturn new vscode.Disposable(() => { });\r\n\t}\r\n\r\n\tprivate _fireSoon(...events: vscode.FileChangeEvent[]): void {\r\n\t\tthis._bufferedEvents.push(...events);\r\n\r\n\t\tif (this._fireSoonHandle) {\r\n\t\t\tclearTimeout(this._fireSoonHandle);\r\n\t\t}\r\n\r\n\t\tthis._fireSoonHandle = setTimeout(() => {\r\n\t\t\tthis._emitter.fire(this._bufferedEvents);\r\n\t\t\tthis._bufferedEvents.length = 0;\r\n\t\t}, 5);\r\n\t}\r\n}","import * as vscode from \"vscode\";\r\nimport { getNonce } from \"../utilities/getNonce\";\r\nimport { getUri } from \"../utilities/getUri\";\r\n\r\nexport class SidebarProvider implements vscode.WebviewViewProvider {\r\n    _view?: vscode.WebviewView;\r\n    _doc?: vscode.TextDocument;\r\n\r\n    constructor(private readonly _extensionUri: vscode.Uri) { }\r\n\r\n    public resolveWebviewView(webviewView: vscode.WebviewView) {\r\n        this._view = webviewView;\r\n\r\n        webviewView.webview.options = {\r\n            // Allow scripts in the webview\r\n            enableScripts: true,\r\n\r\n            localResourceRoots: [this._extensionUri],\r\n        };\r\n\r\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n\r\n        webviewView.webview.onDidReceiveMessage(async (data) => {\r\n            switch (data.type) {\r\n                case \"onInfo\": {\r\n                    if (!data.value) {\r\n                        return;\r\n                    }\r\n                    vscode.window.showInformationMessage(data.value);\r\n                    break;\r\n                }\r\n                case \"ready\": {\r\n                    if (!data.value) {\r\n                        return;\r\n                    }\r\n                    vscode.window.showInformationMessage(data.value);\r\n                    break;\r\n                }\r\n                case \"onError\": {\r\n                    if (!data.value) {\r\n                        return;\r\n                    }\r\n                    vscode.window.showErrorMessage(data.value);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public revive(panel: vscode.WebviewView) {\r\n        this._view = panel;\r\n    }\r\n\r\n    private _getHtmlForWebview(webview: vscode.Webview) {\r\n\r\n        const stylesUri = getUri(webview, this._extensionUri, [\"webview-ui\", \"build\", \"assets\", \"index.css\"]);\r\n        const scriptUri = getUri(webview, this._extensionUri, [\"webview-ui\", \"build\", \"assets\", \"index.js\"]);\r\n\r\n        const nonce = getNonce();\r\n\r\n        return /*html*/ `\r\n      <!DOCTYPE html>\r\n      <html lang=\"en\">\r\n        <head>\r\n          <meta charset=\"UTF-8\" />\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n          <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; connect-src 'self' ws://localhost:5000; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">  \r\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"${stylesUri}\">\r\n          <title>Hello World</title>\r\n        </head>\r\n        <body>\r\n          <div id=\"root\"></div>\r\n          <script type=\"module\" nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\r\n        </body>\r\n      </html>\r\n    `;\r\n    }\r\n}","/**\r\n * A helper function that returns a unique alphanumeric identifier called a nonce.\r\n *\r\n * @remarks This function is primarily used to help enforce content security\r\n * policies for resources/scripts being executed in a webview context.\r\n *\r\n * @returns A nonce\r\n */\r\nexport function getNonce() {\r\n    let text = \"\";\r\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (let i = 0; i < 32; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  }","import { Uri, Webview } from \"vscode\";\r\n\r\n/**\r\n * A helper function which will get the webview URI of a given file or resource.\r\n *\r\n * @remarks This URI can be used within a webview's HTML as a link to the\r\n * given file/resource.\r\n *\r\n * @param webview A reference to the extension webview\r\n * @param extensionUri The URI of the directory containing the extension\r\n * @param pathList An array of strings representing the path to a file/resource\r\n * @returns A URI pointing to the file/resource\r\n */\r\nexport function getUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\r\n  return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\r\n}","module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","sidebarProvider","SidebarProvider","extensionUri","subscriptions","push","vscode","window","registerWebviewViewProvider","commands","registerCommand","showInformationMessage","HelloWorldPanel","render","memFs","MemFS","workspace","registerFileSystemProvider","isCaseSensitive","initialized","_","name","readDirectory","Uri","parse","delete","writeFile","Buffer","from","create","overwrite","createDirectory","Uint8Array","lineCnt","lineLen","lines","i","line","length","Math","random","toString","substr","join","randomData","updateWorkspaceFolders","uri","static","_panel","_disposables","panel","this","onDidDispose","dispose","webview","html","_getWebviewContent","_setWebviewMessageListener","currentPanel","reveal","ViewColumn","One","createWebviewPanel","enableScripts","localResourceRoots","joinPath","undefined","disposable","pop","stylesUri","getUri","scriptUri","nonce","getNonce","cspSource","onDidReceiveMessage","message","command","text","File","type","ctime","mtime","size","data","constructor","FileType","Date","now","Directory","entries","Map","root","stat","_lookup","entry","_lookupAsDirectory","result","child","readFile","_lookupAsFile","FileSystemError","FileNotFound","content","options","basename","path","posix","parent","_lookupParentDirectory","get","FileIsADirectory","FileExists","set","_fireSoon","FileChangeType","Created","byteLength","Changed","rename","oldUri","newUri","oldParent","newParent","newName","Deleted","dirname","with","has","silent","parts","split","part","FileNotADirectory","_emitter","EventEmitter","_bufferedEvents","_fireSoonHandle","onDidChangeFile","event","watch","_resource","Disposable","events","clearTimeout","setTimeout","fire","_extensionUri","_view","_doc","resolveWebviewView","webviewView","_getHtmlForWebview","async","value","showErrorMessage","revive","charAt","floor","possible","pathList","asWebviewUri","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}